"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[243],{57314:e=>{e.exports=JSON.parse('{"functions":[{"name":"from","desc":"Creates a texture from textureData\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal texture = Texture.from(textureData)\\n```","params":[{"name":"textureData","desc":"The textureData","lua_type":"FlagTexture | ModuleScript"}],"returns":[{"desc":"The loaded texture","lua_type":"DrawableObject"}],"function_type":"static","source":{"line":75,"path":"src/DrawableObject/texture.luau"}},{"name":"new","desc":"Creates a texture of the given dimensions with an optional buffer\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal texture = Texture.new(5, 10)\\n```","params":[{"name":"width","desc":"The texture\'s width","lua_type":"number"},{"name":"height","desc":"The texture\'s height","lua_type":"number"},{"name":"bfr","desc":"An optional buffer for textureData","lua_type":"buffer?"}],"returns":[{"desc":"The loaded texture","lua_type":"DrawableObject"}],"function_type":"static","source":{"line":112,"path":"src/DrawableObject/texture.luau"}},{"name":"draw","desc":"Draws a [DrawableObject] onto another [DrawableObject]\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal secondTextureData = require(path.to.secondTexture)\\n\\nlocal textureA = Texture.from(textureData)\\nlocal textureB = Texture.from(secondTextureData)\\n\\n-- Draw textureB on textureA at 0, 0\\nlocal textureC = Texture.draw(textureA, textureB, 0, 0)\\n```","params":[{"name":"object","desc":"The object that the texture will be drawn onto","lua_type":"DrawableObject"},{"name":"texture","desc":"The texture that will be drawn","lua_type":"DrawableObject"},{"name":"spriteX","desc":"The X position of where the texture will be drawn","lua_type":"number"},{"name":"spriteY","desc":"The y position of where the texture will be drawn","lua_type":"number"}],"returns":[{"desc":"The final texture","lua_type":"DrawableObject"}],"function_type":"static","source":{"line":151,"path":"src/DrawableObject/texture.luau"}},{"name":"drawRotated","desc":"Draws a [DrawableObject] onto another [DrawableObject] with a rotation. The pivot is at the center of the [DrawableObject]\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal secondTextureData = require(path.to.secondTexture)\\n\\nlocal textureA = Texture.from(textureData)\\nlocal textureB = Texture.from(secondTextureData)\\n\\n-- Draw textureB on textureA at 0, 0, rotated 15 degrees\\nlocal textureC = Texture.draw(textureA, textureB, 0, 0, 15)\\n```","params":[{"name":"object","desc":"The object that the texture will be drawn onto","lua_type":"DrawableObject"},{"name":"texture","desc":"The texture that will be drawn","lua_type":"DrawableObject"},{"name":"spriteX","desc":"The X position of where the texture will be drawn","lua_type":"number"},{"name":"spriteY","desc":"The y position of where the texture will be drawn","lua_type":"number"},{"name":"rotation","desc":"The rotation of the texture","lua_type":"number"}],"returns":[{"desc":"The final texture","lua_type":"DrawableObject"}],"function_type":"static","source":{"line":222,"path":"src/DrawableObject/texture.luau"}},{"name":"read","desc":"Reads a rectangular selection of pixels from a [DrawableObject]\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal texture = Texture.from(textureData)\\n-- Read a rectangular selection of pixels from 0, 5, with the\\n-- selection being 10x15 (150 pixels, from 0, 5)\\nlocal bfr, width, height = Texture.read(texture, 0, 5, 10, 15)\\n```","params":[{"name":"texture","desc":"The texture that the selection of pixels will be taken from","lua_type":"DrawableObject"},{"name":"xPos","desc":"The top-left X position of the selection","lua_type":"number"},{"name":"yPos","desc":"The top-left Y position of the selection","lua_type":"number"},{"name":"width","desc":"The width of the selection box","lua_type":"number"},{"name":"height","desc":"The height of the selection box","lua_type":"number"}],"returns":[{"desc":"A tuple containing the buffer-data, the width, and height","lua_type":"(buffer, number, number)"}],"function_type":"static","source":{"line":290,"path":"src/DrawableObject/texture.luau"}},{"name":"scale","desc":"Scales a [DrawableObject] by the given amount\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal texture = Texture.from(textureData)\\n\\n-- Enlarge `texture` by 5x on the X axis\\nlocal enlargedTexture = Texture.scale(texture, 5)\\n```","params":[{"name":"texture","desc":"The texture that will be enlarged","lua_type":"DrawableObject"},{"name":"scaleX","desc":"Scaling for x axis. Defaults to 1","lua_type":"number"},{"name":"scaleY","desc":"Scaling for y axis. Defaults to 1","lua_type":"number"}],"returns":[{"desc":"The enlarged texture","lua_type":"DrawableObject"}],"function_type":"static","source":{"line":353,"path":"src/DrawableObject/texture.luau"}},{"name":"fromAssetId","desc":"Creates a [DrawableObject] (texture) from an assetId\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Texture = OSGL.Texture\\n\\nlocal textureData = require(path.to.texture)\\nlocal texture = Texture.fromAssetId(asset.id)\\n```","params":[{"name":"assetId","desc":"The assetId that the texture will be","lua_type":"number"}],"returns":[{"desc":"A finished texture that is the assetId","lua_type":"DrawableObject"}],"function_type":"static","errors":[{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device doesn\'t have enough memory to create the texture"}],"source":{"line":409,"path":"src/DrawableObject/texture.luau"}}],"properties":[],"types":[{"name":"FlagTexture","desc":"The representation of a texture made with the `converter` exe provided with the module.\\r","lua_type":"{ width: number, height: number, pixels: { Color | string }, }","source":{"line":180,"path":"src/types.luau"}}],"name":"Texture","desc":"The Texture class. Handles loading textures into memory\\nso you can draw them onto a [DrawableObject]. Inherits everything from\\n[DrawableObject]","source":{"line":47,"path":"src/DrawableObject/texture.luau"}}')}}]);
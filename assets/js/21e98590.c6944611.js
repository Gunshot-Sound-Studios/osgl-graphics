"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>w});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,w=c["".concat(d,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(w,r(r({ref:n},p),{},{components:t})):a.createElement(w,r({ref:n},p))}));function w(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},58966:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const o={sidebar_position:1},r="Opening a window",l={unversionedId:"Windows/opening-a-window",id:"Windows/opening-a-window",title:"Opening a window",description:"In OSGL, a Window is an EditableImage. OSGL is wrapper around this EditableImage that gives you an easy-to-use API with many handy features.",source:"@site/docs/Windows/opening-a-window.md",sourceDirName:"Windows",slug:"/Windows/opening-a-window",permalink:"/osgl-graphics/docs/Windows/opening-a-window",draft:!1,editUrl:"https://github.com/Gunshot-Sound-Studios/osgl-graphics/edit/main/docs/Windows/opening-a-window.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Setting up your environment",permalink:"/osgl-graphics/docs/setting-up-the-env"},next:{title:"Managing & Rendering to a window",permalink:"/osgl-graphics/docs/Windows/managing-and-rendering-to-a-window"}},d={},s=[],p={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"opening-a-window"},"Opening a window"),(0,i.kt)("p",null,"In OSGL, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Window")," is an EditableImage. OSGL is wrapper around this EditableImage that gives you an easy-to-use API with many handy features."),(0,i.kt)("p",null,"To ",(0,i.kt)("em",{parentName:"p"},"draw")," on a window, you need to create one. OSGL is split into ",(0,i.kt)("em",{parentName:"p"},"sub-modules")," that each serve a different purpose (e.g, drawing on a window, creating a window, etc.). The ",(0,i.kt)("inlineCode",{parentName:"p"},"Window")," class enables you to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Window")," in OSGL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n")),(0,i.kt)("p",null,"There are four functions available for creating a window: ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.from"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.new"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer"),". Below is a high-level extract from the API:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Window.from")," : ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Creates an OSGL window from an existing EditableImage.")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Window.new")," : ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Creates an OSGL window by initializing a new EditableImage instance at the specified location.")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId"),": ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Given an assetId, creates a Window.")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer"),": ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Given a buffer, creates a Window.")))),(0,i.kt)("p",null,"To create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Window")," directly on the designated ImageLabel, utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.new")," function. Since there is no existing EditableImage, and using either a assetId or buffer is not desired, this method allows for direct window creation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n\nlocal windowUi = -- *reference to windowUi, our `ImageLabel`*\n\n-- Create our window, 500x500\nlocal myWindow = Window.new(windowUi, { sizeX = 500, sizeY = 500 })\n")),(0,i.kt)("p",null,"The example above creates an OSGL window, with a size of 500x500, under ",(0,i.kt)("inlineCode",{parentName:"p"},"windowUi"),". You can find more details about this function in the API."),(0,i.kt)("p",null,"And that's it! This OSGL window is now ready and setup for rendering!\nThe functions ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.from")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId")," can also be used to create a window.\nAs previously mentioned:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Window.fom"),": ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Creates an OSGL window from an existing EditableImage.")))),(0,i.kt)("p",null,"This means if an ",(0,i.kt)("inlineCode",{parentName:"p"},"EditableImage")," already exists, we can create a window from it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local editableImage = reference.to.editableImage\nlocal window = Window.from(editableImage) -- Our window now has `editableImage` as a renderer\n")),(0,i.kt)("p",null,"It's important to remember that a window is actually just an ",(0,i.kt)("inlineCode",{parentName:"p"},"EditableImage")," in disguise. This means\nit can render to multiple images at the same time, as all a window does is contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"EditableImage"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId")," will create a window, but the contents of the window will be a assetId."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"This function will ",(0,i.kt)("strong",{parentName:"p"},"error")," if you don't own the asset! Make sure you have the permissions before using this function to avoid errors. The owner of the place (or group that owns the experience) must have the valid access.")),(0,i.kt)("p",null,"The function can be used like ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.new"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local window = Window.fromAssetId(asset.id)\n")),(0,i.kt)("p",null,"On the other hand, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer")," to create a window with a ",(0,i.kt)("inlineCode",{parentName:"p"},"buffer")," object already loaded in. This is useful when you are serializing and deserializing ",(0,i.kt)("inlineCode",{parentName:"p"},"Window"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"Texture"),"s. You can learn more about this ",(0,i.kt)("a",{parentName:"p",href:"/osgl-graphics/docs/Windows/serializing-and-deserializing"},"here"),"."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[260],{95540:e=>{e.exports=JSON.parse('{"functions":[{"name":"Render","desc":"Renders the buffer to the EditableImage\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n\\n-- Runs every heartbeat\\nwhile task.wait() do\\n    -- *rendering magic*\\n\\n    myWindow:Render()\\nend\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","source":{"line":71,"path":"src/DrawableObject/window.luau"}},{"name":"Clear","desc":"Clears the double-buffer with the given color or a transparent color\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new EditableImage\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n\\n-- Runs every heartbeat\\nwhile task.wait() do\\n    myWindow:Clear(color.GREEN)\\n    myWindow:Render()\\n\\n    -- The above could also be chained as the followed:\\n    --[[\\n    myWindow:Clear(color.GREEN)\\n            :Render()\\n    --]]\\nend\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"},{"name":"clearColor","desc":"The color the screen will be cleared with","lua_type":"Color?"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","source":{"line":182,"path":"src/DrawableObject/window.luau"}},{"name":"AddRenderer","desc":"Renders the current window to a set of Images with little-to-no performance impact.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new EditableImage\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nmyWindow:AddRenderer(path.to.imageA, path.to.imageB)\\n-- imageA and imageB now both render the Window at the same time\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"},{"name":"...","desc":"The Images that will become renderers","lua_type":"...(ImageLabel | ImageButton)"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","source":{"line":217,"path":"src/DrawableObject/window.luau"}},{"name":"RemoveRenderer","desc":"Removes any renderers from any Images that are rendering the Window\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new EditableImage\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nmyWindow:AddRenderer(path.to.imageA, path.to.imageB)\\n-- imageA and imageB now both render the Window at the same time\\nmyWindow:RemoveRenderer(path.to.imageB)\\n-- imageB no longer renders the Window\\n\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"},{"name":"...","desc":"The Images that will be removed if rendering the Window","lua_type":"...(ImageLabel | ImageButton)"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","source":{"line":251,"path":"src/DrawableObject/window.luau"}},{"name":"Resize","desc":"Resizes the window and its pixel buffer. This function may be resource intensive and\\nis not made for constant use. May require a re-render, depending on the new size.\\nAfter a window is resized, all renderers in `window.renderers` are added as a renderer\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nmyWindow:Resize(100) -- Changes width to 100\\n\\n-- Runs every heartbeat\\nwhile task.wait() do\\n    -- *rendering magic*\\n\\n    myWindow:Render()\\nend\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"},{"name":"newWidth","desc":"The new width of the window","lua_type":"number?"},{"name":"newHeight","desc":"The new height of the window","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Height\\"","desc":"This error occurs if the height is smaller than 0"},{"lua_type":"\\"Width\\"","desc":"This error occurs if the width is smaller than 0"},{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device does not have enough memory to resize the window"}],"source":{"line":298,"path":"src/DrawableObject/window.luau"}},{"name":"Deserialize","desc":"Safely replaces the current window\'s buffer with a new buffer by resizing it to the specified width and height, preventing errors during the update\\n\\n```lua\\n-- Save.luau\\nlocal bfr, width, height = myWindow:Serialize()\\n-- *save data*\\n\\n-- Load.luau\\nlocal bfr, width, height = -- *load data*\\nwindow:Deserialize(bfr, width, height)\\n```","params":[{"name":"bfr","desc":"The new buffer","lua_type":"buffer"},{"name":"width","desc":"The width of the buffer","lua_type":"number?"},{"name":"height","desc":"The height of the buffer","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Window"}],"function_type":"static","source":{"line":424,"path":"src/DrawableObject/window.luau"}},{"name":"GetRelativeMouseToRenderer","desc":"Returns a tuple describing the mouse position relative to the renderer from the top-left corner.\\nThe boolean represents if the mouse is in the renderer, and the following 2 numbers are the X and Y\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nprint(myWindow:GetRelativeMouseToRenderer(path.to.parent))\\n```","params":[{"name":"self","desc":"","lua_type":"types.Window"},{"name":"image","desc":"The renderer instance","lua_type":"ImageLabel | ImageButton"}],"returns":[{"desc":"","lua_type":"(boolean, number, number)"}],"function_type":"static","source":{"line":482,"path":"src/DrawableObject/window.luau"}},{"name":"new","desc":"Creates an OSGL window by creating a new EditableImage instance at the given place.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { size = 50, size = 50 })\\n```","params":[{"name":"parent","desc":"The instance the EditableImage will be parented to","lua_type":"Instance"},{"name":"config","desc":"Optional configurations","lua_type":"WindowConfiguration?"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Typechecking\\"","desc":"This error occurs when a required argument is not passed or the type is incorrect"},{"lua_type":"\\"Permission\\"","desc":"This error occurs when the owner of the place does not have the `EditableImage` feature enabled"},{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device doesn\'t have enough memory to create the Window"}],"source":{"line":554,"path":"src/DrawableObject/window.luau"}},{"name":"from","desc":"Creates an OSGL window from an existing EditableImage.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an existing EditableImage\\nlocal myWindow = Window.from(path.to.editableImage)\\n```","params":[{"name":"editableImage","desc":"The existing EditableImage","lua_type":"EditableImage"},{"name":"renderers","desc":"An argument used internally to initially set any renderers","lua_type":"{ImageLabel | ImageButton?}"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Argument Type\\"","desc":"This error occurs when a required argument is not passed or the type is incorrect"},{"lua_type":"\\"Permission\\"","desc":"This error occurs when the owner of the place does not have the `EditableImage` feature enabled"},{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device doesn\'t have enough memory to create the Window"}],"source":{"line":603,"path":"src/DrawableObject/window.luau"}},{"name":"fromAssetId","desc":"Given an assetId, creates a Window.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an assetId\\nlocal myWindow = Window.fromAssetId(asset.id)\\n\\n-- use AddRenderers to add a renderer\\nmyWindow:AddRenderers(path.to.imageA)\\n```","params":[{"name":"assetId","desc":"The assetId that will be loaded","lua_type":"number"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Permission\\"","desc":"This error occurs when the owner of the place does not have the `EditableImage` feature enabled"},{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device doesn\'t have enough memory to create the Window"}],"source":{"line":647,"path":"src/DrawableObject/window.luau"}},{"name":"fromBuffer","desc":"Given a buffer, creates a Window.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an assetId\\nlocal myWindow = Window.fromBuffer(bfr, { sizeX = bufferWidth, sizeY = bufferHeight })\\n\\n-- use AddRenderers to add a renderer\\nmyWindow:AddRenderers(path.to.imageA)\\n```","params":[{"name":"bfr","desc":"The buffer that will be loaded into the Window","lua_type":"buffer"},{"name":"config","desc":"Optional configurations","lua_type":"WindowConfiguration?"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Permission\\"","desc":"This error occurs when the owner of the place does not have the `EditableImage` feature enabled"},{"lua_type":"\\"Memory\\"","desc":"This error occurs when the device doesn\'t have enough memory to create the Window"}],"source":{"line":678,"path":"src/DrawableObject/window.luau"}}],"properties":[{"name":"editableImage","desc":"The actual editableImage of the Window","lua_type":"EditableImage","source":{"line":716,"path":"src/DrawableObject/window.luau"}},{"name":"targetFPS","desc":"The Window\'s Target FPS. Defaults to 60\\n\\n```lua\\nwindow.targetFPS = 5\\n\\nwhile task.wait() do\\n\\twindow:Render() -- Renders at roughly 5FPS\\nend\\n```","lua_type":"number","source":{"line":730,"path":"src/DrawableObject/window.luau"}}],"types":[{"name":"WindowConfiguration","desc":"An OSGL window is the representation of the EditableImage instance.\\nA window can be created by importing the OSGL \'*window*\' submodule:\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a Window with a size of 50x50\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n```\\r","fields":[{"name":"sizeX","lua_type":"number","desc":"The width of the OSGL window. The maximum width is 1024. Defaults to 100"},{"name":"sizeY","lua_type":"number","desc":"The height of the OSGL window. The maximum height is 1024. Defaults to 100"}],"source":{"line":56,"path":"src/types.luau"}},{"name":"Window","desc":"An OSGL window is the representation of the EditableImage instance.\\nA window can be created by importing the OSGL \'*window*\' submodule:\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an existing EditableImage\\nlocal myWindow = Window.from(path.to.editableImage)\\n```\\r","fields":[{"name":"editableImage","lua_type":"EditableImage","desc":"The actual `EditableImage` instance."},{"name":"targetFPS","lua_type":"number","desc":"The FPS OSGL should aim to render at."},{"name":"renderers","lua_type":"{ImageLabel | ImageButton}","desc":"A value used internally to keep track of what the Window is rendering too"},{"name":"Render","lua_type":"(self: Window) -> Window","desc":"Renders the contents of the buffer"},{"name":"Clear","lua_type":"(self: Window, color: Color) -> Window","desc":"Clears the window with a color"},{"name":"Resize","lua_type":"(self: Window, newWidth: number, newHeight: number) -> Window","desc":"Resizes the window to a new size"},{"name":"AddRenderer","lua_type":"(self: Window, ...ImageLabel | ImageButton) -> Window","desc":"Adds a new renderer instance"},{"name":"RemoveRenderer","lua_type":"(self: Window, ...ImageLabel | ImageButton) -> Window","desc":"Removes a renderer instance"},{"name":"Deserialize","lua_type":"(self: Window, bfr: buffer, width: number, height: number) -> Window","desc":"Safely replaces the current window\'s buffer with a new buffer by resizing it to the specified width and height, preventing errors during the update"},{"name":"GetRelativeMouseToRenderer","lua_type":"(self: Window, image: ImageLabel | ImageButton) -> (boolean, number, number)","desc":"Returns the mouse position relative to the renderer"}],"source":{"line":127,"path":"src/types.luau"}}],"name":"Window","desc":"The window class. Handles creations of OSGL-Windows.\\nAn OSGL window is the representation of the EditableImage\\ninstance. Inherits everything from [DrawableObject].","source":{"line":47,"path":"src/DrawableObject/window.luau"}}')}}]);
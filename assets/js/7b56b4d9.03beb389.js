"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[230],{10147:e=>{e.exports=JSON.parse('{"functions":[{"name":"PlaySync","desc":"Plays a video syncronously. The callback will be ran every frame and provides the current frame as a [Texture].\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\n\\n-- Plays the video syncronously, rendering \\n-- to `myWindow` every frame\\nvideo:PlaySync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n    myWindow:Render()\\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"},{"name":"callback","desc":"A callback function that will be ran every frame, returning the current frame as a [Texture].","lua_type":"(texture: Texture) -> ()"}],"returns":[{"desc":"Returns itself.","lua_type":"Video"}],"function_type":"static","source":{"line":68,"path":"src/video.luau"}},{"name":"PlayAsync","desc":"Plays a video asyncronously. The callback will be ran every frame and provides the current frame as a [Texture].\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\n\\n-- Plays the video asyncronously, rendering \\n-- to `myWindow` every frame\\nvideo:PlayAsync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n    myWindow:Render()\\nend)\\n\\nprint(\\"This code will run while the video is playing!\\")\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"},{"name":"callback","desc":"A callback function that will be ran every frame, returning the current frame as a [Texture].","lua_type":"(texture: Texture) -> ()"}],"returns":[{"desc":"Returns itself.","lua_type":"Video"}],"function_type":"static","source":{"line":124,"path":"src/video.luau"}},{"name":"Next","desc":"Skips to the next frame. Goes to the first frame if `loop` is enabled.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\n\\n-- Plays the video syncronously, rendering \\n-- to `myWindow` every frame\\nvideo:PlaySync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n\\n    if video.playbackFrame == 10 then\\n        -- Skip the frame\\n        video:Next()\\n    end \\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"}],"returns":[{"desc":"Returns itself.","lua_type":"Video"}],"function_type":"static","source":{"line":162,"path":"src/video.luau"}},{"name":"Previous","desc":"Goes to the previous frame. Does not go to the last frame if `loop` is enabled.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\n\\n-- Plays the video syncronously, rendering \\n-- to `myWindow` every frame\\nvideo:PlaySync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n\\n    if video.playbackFrame == 10 then\\n        -- Go back a frame\\n        video:Previous()\\n    end \\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"}],"returns":[{"desc":"Returns itself.","lua_type":"Video"}],"function_type":"static","source":{"line":206,"path":"src/video.luau"}},{"name":"Stop","desc":"Stops the video playback and sets the current frame to the start.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\n\\n-- Plays the video syncronously, rendering \\n-- to `myWindow` every frame\\nvideo:PlaySync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n\\n    if video.playbackFrame == 10 then\\n        -- Stop the playback\\n        video:Stop()\\n    end \\nend)\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"}],"returns":[{"desc":"Returns itself.","lua_type":"Video"}],"function_type":"static","source":{"line":247,"path":"src/video.luau"}},{"name":"GetFrame","desc":"Returns a specific frame as a [Texture]\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nlocal frameTwo = video:GetFrame(2)\\n\\n-- frameTwo is a `Texture` object!\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"},{"name":"frame","desc":"","lua_type":"number"}],"returns":[{"desc":"Returns the frame as a texture.","lua_type":"Texture"}],"function_type":"static","source":{"line":277,"path":"src/video.luau"}},{"name":"GetBufferOfFrame","desc":"Returns a specific frame as a buffer\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nlocal frameTwo = video:GetBufferOfFrame(2)\\n\\n-- frameTwo is a buffer object!\\n```","params":[{"name":"self","desc":"","lua_type":"types.Video<T>"},{"name":"frame","desc":"","lua_type":"number"}],"returns":[{"desc":"Returns the frame as a buffer.","lua_type":"Texture"}],"function_type":"static","source":{"line":304,"path":"src/video.luau"}},{"name":"new","desc":"Create a new [Video] object of the given dimensions, with an optional buffer.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\n-- Blank 500x500 video\\nlocal video = Video.new(500, 500)\\n```","params":[{"name":"width","desc":"","lua_type":"number"},{"name":"height","desc":"","lua_type":"number"},{"name":"frames","desc":"","lua_type":"{ buffer }?"}],"returns":[{"desc":"The newly created [Video] object.","lua_type":"Video"}],"function_type":"static","source":{"line":328,"path":"src/video.luau"}},{"name":"from","desc":"Creates a new [Video] object from a collection of [Texture] objects.\\nAll frames must be the same size.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\n\\t\\n-- video is a `Video` object!\\n```","params":[{"name":"collection","desc":"","lua_type":"{ types.FlagTexture | ModuleScript }"}],"returns":[{"desc":"The newly created [Video] object.","lua_type":"Video"}],"function_type":"static","source":{"line":386,"path":"src/video.luau"}}],"properties":[{"name":"sizeX","desc":"The videos width in pixels.","lua_type":"number","source":{"line":419,"path":"src/video.luau"}},{"name":"sizeY","desc":"The videos height in pixels.","lua_type":"number","source":{"line":425,"path":"src/video.luau"}},{"name":"playbackFrame","desc":"The frame the video is currently displaying","lua_type":"number","source":{"line":431,"path":"src/video.luau"}},{"name":"frameRate","desc":"The videos \\"FPS\\" (frames per second).","lua_type":"number","source":{"line":437,"path":"src/video.luau"}},{"name":"playing","desc":"Whether the video is currently playing.","lua_type":"boolean","source":{"line":443,"path":"src/video.luau"}},{"name":"loop","desc":"Whether the video should loop after finishing","lua_type":"boolean","source":{"line":449,"path":"src/video.luau"}},{"name":"frames","desc":"A set of [DrawableObject] that represent the videos frames.","lua_type":"{buffer}","source":{"line":455,"path":"src/video.luau"}}],"types":[{"name":"Video","desc":"An animatable set of [DrawableObject] that represents a video.\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal Video = OSGL.Video\\nlocal Texture = OSGL.Texture\\n\u200b\\n-- Creates a Window with a size of 50x50\\n-- This window is a DrawableObject\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n\u3164\\nlocal frames = -- Reference to texture-data\\nlocal video = Video.from(frames)\\nvideo.frameRate = 60\\nvideo.loop = true\\nvideo:PlaySync(function(texture)\\n    Texture.draw(myWindow, texture, 0, 0)\\n    myWindow:Render()\\nend)\\n```\\r","fields":[{"name":"sizeX","lua_type":"number","desc":"The videos width."},{"name":"sizeX","lua_type":"number","desc":"The videos height."},{"name":"playbackFrame","lua_type":"number","desc":"Which frame the video is playing."},{"name":"frameRate","lua_type":"number","desc":"How many frames-per-second to display."},{"name":"playing","lua_type":"boolean","desc":"Whether the video is playing or not."},{"name":"loop","lua_type":"boolean","desc":"Whether the video should loop after finishing."},{"name":"frames","lua_type":"{buffer}","desc":"A set of [DrawableObject] that represent the videos frames."},{"name":"PlaySync","lua_type":"(self: Video<T>, callback: (texture: Texture<T>) -> ()) -> Video<T>","desc":""},{"name":"PlayAsync","lua_type":"(self: Video<T>, callback: (texture: Texture<T>) -> ()) -> Video<T>","desc":""},{"name":"Stop","lua_type":"(self: Video<T>) -> Video<T>","desc":""},{"name":"GetFrame","lua_type":"(self: Video<T>, frame: number) -> Texture<T>","desc":""},{"name":"GetBufferOfFrame","lua_type":"(self: Video<T>, frame: number) -> buffer","desc":""},{"name":"Previous:","lua_type":"(self: Video<T>) -> Video<T>","desc":""},{"name":"Next:","lua_type":"(self: Video<T>) -> Video<T>","desc":""}],"source":{"line":230,"path":"src/types.luau"}}],"name":"Video","desc":"The Video class is responsible for managing\\nvideo playback and rendering. It facilitates the\\nloading and manipulation of video textures (an animatable [DrawableObject]!).","source":{"line":36,"path":"src/video.luau"}}')}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[265],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",w={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),c=o,m=u["".concat(d,".").concat(c)]||u[c]||w[c]||i;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},58966:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>w,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(87462),o=(t(67294),t(3905));const i={sidebar_position:1},r="Opening a window",l={unversionedId:"Windows/opening-a-window",id:"Windows/opening-a-window",title:"Opening a window",description:"In OSGL, a Window is an EditableImage. OSGL is wrapper around this EditableImage that gives you an easy-to-use API with many handy features.",source:"@site/docs/Windows/opening-a-window.md",sourceDirName:"Windows",slug:"/Windows/opening-a-window",permalink:"/osgl-graphics/docs/Windows/opening-a-window",draft:!1,editUrl:"https://github.com/Gunshot-Sound-Studios/osgl-graphics/edit/main/docs/Windows/opening-a-window.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Setting up your environment",permalink:"/osgl-graphics/docs/setting-up-the-env"},next:{title:"Managing & Rendering to a window",permalink:"/osgl-graphics/docs/Windows/managing-and-rendering-to-a-window"}},d={},s=[],p={toc:s},u="wrapper";function w(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"opening-a-window"},"Opening a window"),(0,o.kt)("p",null,"In OSGL, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," is an EditableImage. OSGL is wrapper around this EditableImage that gives you an easy-to-use API with many handy features."),(0,o.kt)("p",null,"Before we can actually ",(0,o.kt)("em",{parentName:"p"},"draw")," on our window, we need to create one. OSGL is split into ",(0,o.kt)("em",{parentName:"p"},"sub-modules")," that each serve a different purpose (e.g, drawing on a window, creating a window, etc.). In this case, we want the ",(0,o.kt)("inlineCode",{parentName:"p"},"Window")," class which allows us to create our window."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n")),(0,o.kt)("p",null,"There are four functions available for creating our window: ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.from"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.new"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer"),". Below is a high-level extract from the API:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Window.from")," : ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Creates an OSGL window from an existing EditableImage.")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Window.new")," : ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Creates an OSGL window by initializing a new EditableImage instance at the specified location.")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId"),": ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Given an assetId, creates a Window.")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer"),": ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Given a buffer, creates a Window.")))),(0,o.kt)("p",null,"Since we don\u2019t have an existing ",(0,o.kt)("inlineCode",{parentName:"p"},"EditableImage")," and do not wish to use an assetId, nor a buffer, we'll use ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.new")," to create our window directly on the designated ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageLabel"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n\nlocal windowUi = -- *reference to windowUi, our `ImageLabel`*\n\n-- Create our window, 500x500\nlocal myWindow = Window.new(windowUi, { sizeX = 500, sizeY = 500 })\n")),(0,o.kt)("p",null,"The example above creates an OSGL window, with a size of 500x500, under ",(0,o.kt)("inlineCode",{parentName:"p"},"windowUi"),". You can find more details about this function in the API."),(0,o.kt)("p",null,"And that's it! We have our OSGL window ready and setup for rendering!\nYou can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.from")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId")," to create a window.\nAs previously mentioned:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"Window.fom"),": ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Creates an OSGL window from an existing EditableImage.")))),(0,o.kt)("p",null,"This means if we already ",(0,o.kt)("em",{parentName:"p"},"have")," an ",(0,o.kt)("inlineCode",{parentName:"p"},"EditableImage"),", we can create a window from it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local editableImage = reference.to.editableImage\nlocal window = Window.from(editableImage) -- Our window now has `editableImage` as a renderer\n")),(0,o.kt)("p",null,"It's important to remember that a window is actually just an ",(0,o.kt)("inlineCode",{parentName:"p"},"EditableImage")," in disguise. This means\nyou can actually render to multiple images at the same time, since all a Window does is contain the ",(0,o.kt)("inlineCode",{parentName:"p"},"EditableImage"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromAssetId")," will create a window, but the contents of the window will be a assetId."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"This function will ",(0,o.kt)("strong",{parentName:"p"},"error")," if you don't own the asset! Make sure you have the permissions before using this function to avoid errors.")),(0,o.kt)("p",null,"The function can be used like ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.new"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local window = Window.fromAssetId(asset.id)\n")),(0,o.kt)("p",null,"On the other hand, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.fromBuffer")," to create a window with a ",(0,o.kt)("inlineCode",{parentName:"p"},"buffer")," object already loaded in. This is useful when you are serializing and deserializing many ",(0,o.kt)("inlineCode",{parentName:"p"},"Window"),"s and ",(0,o.kt)("inlineCode",{parentName:"p"},"Texture"),"s. You can learn more about this ",(0,o.kt)("a",{parentName:"p",href:"/osgl-graphics/docs/Windows/serializing-and-deserializing"},"here"),"."))}w.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[696],{71494:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Advanced/serializing-and-deserializing","title":"Serializing & Deserializing","description":"OSGL simplifies the process of saving and loading your Windows and Textures without encountering buffer errors. This process, known as serialization and deserialization, ensures smooth data transfer.","source":"@site/docs/Advanced/serializing-and-deserializing.md","sourceDirName":"Advanced","slug":"/Advanced/serializing-and-deserializing","permalink":"/osgl/docs/Advanced/serializing-and-deserializing","draft":false,"unlisted":false,"editUrl":"https://github.com/osgl-rbx/osgl/edit/main/docs/Advanced/serializing-and-deserializing.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","previous":{"title":"Rendering fonts","permalink":"/osgl/docs/Fonts/rendering-fonts"},"next":{"title":"Multiple Renderers","permalink":"/osgl/docs/Advanced/multiple-renderers"}}');var s=i(74848),a=i(28453);const t={sidebar_position:1},d="Serializing & Deserializing",o={},l=[{value:"Why Serialize and Deserialize?",id:"why-serialize-and-deserialize",level:3},{value:"Understanding the Difference",id:"understanding-the-difference",level:3},{value:"Serializing Textures",id:"serializing-textures",level:3},{value:"Saving and Loading Example",id:"saving-and-loading-example",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"serializing--deserializing",children:"Serializing & Deserializing"})}),"\n",(0,s.jsxs)(n.p,{children:["OSGL simplifies the process of saving and loading your ",(0,s.jsx)(n.code,{children:"Window"}),"s and ",(0,s.jsxs)(n.a,{href:"/osgl/docs/Textures/loading-textures",children:[(0,s.jsx)(n.code,{children:"Texture"}),"s"]})," without encountering ",(0,s.jsx)(n.code,{children:"buffer"})," errors. This process, known as ",(0,s.jsx)(n.strong,{children:"serialization"})," and ",(0,s.jsx)(n.strong,{children:"deserialization"}),", ensures smooth data transfer."]}),"\n",(0,s.jsx)(n.h3,{id:"why-serialize-and-deserialize",children:"Why Serialize and Deserialize?"}),"\n",(0,s.jsxs)(n.p,{children:["Consider a scenario where you have two ",(0,s.jsx)(n.code,{children:"Window"}),"s: Window A and Window B. You want to copy the contents of ",(0,s.jsx)(n.code,{children:"A"})," into ",(0,s.jsx)(n.code,{children:"B"}),". Typically, you might do something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local B = Window.fromBuffer(A.buffer, configuration)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["However, if ",(0,s.jsx)(n.code,{children:"B"})," is not the same size as ",(0,s.jsx)(n.code,{children:"A"}),", an error will occur. This is where ",(0,s.jsx)(n.strong,{children:"serialization"})," and ",(0,s.jsx)(n.strong,{children:"deserialization"})," become useful. You can ",(0,s.jsx)(n.strong,{children:"serialize"})," a ",(0,s.jsx)(n.code,{children:"Window"})," and ",(0,s.jsx)(n.strong,{children:"deserialize"})," it into another ",(0,s.jsx)(n.code,{children:"Window"})," or even a ",(0,s.jsx)(n.code,{children:"Texture"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local A = Window.new(parent, { sizeX = 50, sizeY = 50 })\r\n\r\n-- Draw a texture to `A`\r\nlocal txt = texture.fromAssetId(14419725604)\r\ntexture.draw(A, txt, 0, 0)\r\n\r\n-- Serialize `A` to get its buffer, width, and height\r\nlocal bfr, w, h = A:Serialize()\r\n\r\nlocal B = Window.new(parentTwo, { sizeX = 2, sizeY = 10 })\r\n\r\n-- Resize `B` to match `A`'s dimensions and paste the contents\r\nB:Deserialize(bfr, w, h)\r\n\r\n-- Now `B` has the same size and contents as `A`\r\nB:Render()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"understanding-the-difference",children:"Understanding the Difference"}),"\n",(0,s.jsxs)(n.p,{children:["If you are certain about the sizes of the ",(0,s.jsx)(n.code,{children:"Window"}),"s, you can use ",(0,s.jsx)(n.code,{children:"fromBuffer"}),". However, if you are unsure or need to resize dynamically, it is advisable to use ",(0,s.jsx)(n.code,{children:"Deserialize"}),". The ",(0,s.jsx)(n.code,{children:"Deserialize"})," function safely scales the size of the buffer. Directly setting the ",(0,s.jsx)(n.code,{children:"buffer"})," to another buffer may cause size errors! It's always safer to use ",(0,s.jsx)(n.code,{children:"Deserialize"}),", however if you are confident that both ",(0,s.jsx)(n.code,{children:"buffer"}),"s will always be the same size, you can directly set the buffer via:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"A.buffer = B.buffer\n"})}),"\n",(0,s.jsx)(n.h3,{id:"serializing-textures",children:"Serializing Textures"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Texture"}),"s can also be serialized:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"local txt = texture.fromAssetId(14419725604)\r\nlocal bfr, w, h = txt:Serialize()\r\n\r\n-- Create a new window with the texture's contents\r\nlocal window = Window.fromBuffer(bfr, { sizeX = w, sizeY = h })\r\n\r\n-- Alternatively, use `Deserialize` to update an existing window:\r\nlocal secondWindow = -- *reference to a window*\r\nsecondWindow:Deserialize(bfr, w, h)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"saving-and-loading-example",children:"Saving and Loading Example"}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of how you can save and load the state of a ",(0,s.jsx)(n.code,{children:"Window"})," using serialization and deserialization:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-lua",children:"-- Save.luau\r\nlocal bfr, width, height = windowOne:Serialize()\r\n-- *save data*\r\n\r\n-- Load.luau\r\nlocal bfr, width, height = -- *load data*\r\nwindowTwo:Deserialize(bfr, width, height)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In summary, while serialization and deserialization are powerful functions for managing ",(0,s.jsx)(n.code,{children:"Window"}),"s and ",(0,s.jsx)(n.code,{children:"Texture"}),"s, there are times when directly setting the buffer with ",(0,s.jsx)(n.code,{children:"A.buffer = B.buffer"})," might be more convenient. This approach can be useful when you are certain that the sizes of the buffers match, as it avoids the need to handle potential performance issues / resizing issues that come with deserialization."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var r=i(96540);const s={},a=r.createContext(s);function t(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);
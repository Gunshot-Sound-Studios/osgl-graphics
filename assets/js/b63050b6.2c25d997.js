"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(t),f=a,m=u["".concat(l,".").concat(f)]||u[f]||c[f]||r;return t?i.createElement(m,o(o({ref:n},p),{},{components:t})):i.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},21156:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));const r={sidebar_position:3},o="Serializing & Deserializing",s={unversionedId:"Windows/serializing-and-deserializing",id:"Windows/serializing-and-deserializing",title:"Serializing & Deserializing",description:"OSGL makes it easy to save and load your Windows and Textures safely without buffer errors. This process, known as serialization and deserialization, allows the transfer of data smoothly.",source:"@site/docs/Windows/serializing-and-deserializing.md",sourceDirName:"Windows",slug:"/Windows/serializing-and-deserializing",permalink:"/osgl-graphics/docs/Windows/serializing-and-deserializing",draft:!1,editUrl:"https://github.com/Gunshot-Sound-Studios/osgl-graphics/edit/main/docs/Windows/serializing-and-deserializing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Managing & Rendering to a window",permalink:"/osgl-graphics/docs/Windows/managing-and-rendering-to-a-window"},next:{title:"Loading Textures",permalink:"/osgl-graphics/docs/Textures/loading-textures"}},l={},d=[{value:"Why Serialize and Deserialize?",id:"why-serialize-and-deserialize",level:3},{value:"What&#39;s the Difference?",id:"whats-the-difference",level:3},{value:"Serializing Textures",id:"serializing-textures",level:3},{value:"Deserializing Textures",id:"deserializing-textures",level:3}],p={toc:d},u="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"serializing--deserializing"},"Serializing & Deserializing"),(0,a.kt)("p",null,"OSGL makes it easy to save and load your ",(0,a.kt)("inlineCode",{parentName:"p"},"Window"),"s and ",(0,a.kt)("a",{parentName:"p",href:"/osgl-graphics/docs/Textures/loading-textures"},(0,a.kt)("inlineCode",{parentName:"a"},"Texture"),"s")," safely without ",(0,a.kt)("inlineCode",{parentName:"p"},"buffer")," errors. This process, known as ",(0,a.kt)("strong",{parentName:"p"},"serialization")," and ",(0,a.kt)("strong",{parentName:"p"},"deserialization"),", allows the transfer of data smoothly."),(0,a.kt)("h3",{id:"why-serialize-and-deserialize"},"Why Serialize and Deserialize?"),(0,a.kt)("p",null,"Imagine you have two ",(0,a.kt)("inlineCode",{parentName:"p"},"Window"),"s: Window A and Window B. You want to copy the contents of ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),". Normally, you'd do something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local B = Window.fromBuffer(A.buffer, configuration)\n")),(0,a.kt)("p",null,"However: if ",(0,a.kt)("inlineCode",{parentName:"p"},"B")," isn't the same size as ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", an error will occur. This is where ",(0,a.kt)("strong",{parentName:"p"},"serialization")," and ",(0,a.kt)("strong",{parentName:"p"},"deserialization")," are useful. You can ",(0,a.kt)("strong",{parentName:"p"},"serialize")," a ",(0,a.kt)("inlineCode",{parentName:"p"},"Window")," and ",(0,a.kt)("strong",{parentName:"p"},"deserialize")," it into another ",(0,a.kt)("inlineCode",{parentName:"p"},"Window")," or even a ",(0,a.kt)("inlineCode",{parentName:"p"},"Texture"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local A = Window.new(parent, { sizeX = 50, sizeY = 50 })\n\n-- Draw a texture to `A`\nlocal txt = texture.fromAssetId(14419725604)\ntexture.draw(A, txt, 0, 0)\n\n-- Serialize `A` to get its buffer, width, and height\nlocal bfr, w, h = A:Serialize()\n\nlocal B = Window.new(parentTwo, { sizeX = 2, sizeY = 10 })\n\n-- Resize `B` to match `A`'s dimensions and paste the contents\nB:Deserialize(bfr, w, h)\n\n-- Now `B` has the same size and contents as `A`\nB:Render()\n")),(0,a.kt)("h3",{id:"whats-the-difference"},"What's the Difference?"),(0,a.kt)("p",null,"If you're confident about the sizes of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Window"),"s, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"fromBuffer"),". But when you're not sure or need to resize dynamically, always use ",(0,a.kt)("inlineCode",{parentName:"p"},"Deserialize"),"."),(0,a.kt)("h3",{id:"serializing-textures"},"Serializing Textures"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Texture"),"s can also be serialized:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local txt = texture.fromAssetId(14419725604)\nlocal bfr, w, h = txt:Serialize()\n\n-- Create a new window with the texture's contents\nlocal window = Window.fromBuffer(bfr, { sizeX = w, sizeY = h })\n\n-- Alternatively, use `Deserialize` to update an existing window:\nlocal secondWindow = -- *reference to a window*\nsecondWindow:Deserialize(bfr, w, h)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"fromBuffer")," creates a new Window, while ",(0,a.kt)("inlineCode",{parentName:"p"},"Deserialize")," updates an existing one. Both approaches get the job done; it just depends on what you need."),(0,a.kt)("h3",{id:"deserializing-textures"},"Deserializing Textures"),(0,a.kt)("p",null,"Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"Window"),"s, ",(0,a.kt)("inlineCode",{parentName:"p"},"Texture"),"s don\u2019t have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Deserialize")," method. Why? Because you can simply create a new one like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local txt = texture.fromAssetId(14419725604)\nlocal bfr, w, h = txt:Serialize()\n\n-- Create a new texture from the serialized data\nlocal newTxt = texture.new(w, h, bfr)\n")))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[543],{92471:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"Advanced/multiple-renderers","title":"Multiple Renderers","description":"Windows can render to numerous instances simultaneously with minimal to no performance degradation. This capability is facilitated by the efficient management of renderers through the AddRenderer and RemoveRenderer methods. These methods enable addition and removal of renderers from the Window during runtime.","source":"@site/docs/Advanced/multiple-renderers.md","sourceDirName":"Advanced","slug":"/Advanced/multiple-renderers","permalink":"/osgl/docs/Advanced/multiple-renderers","draft":false,"unlisted":false,"editUrl":"https://github.com/osgl-rbx/osgl/edit/main/docs/Advanced/multiple-renderers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Serializing & Deserializing","permalink":"/osgl/docs/Advanced/serializing-and-deserializing"},"next":{"title":"Migration","permalink":"/osgl/docs/Migrating/Migration"}}');var i=r(74848),t=r(28453);const s={sidebar_position:2},o="Multiple Renderers",a={},l=[{value:"Adding a Renderer",id:"adding-a-renderer",level:2},{value:"Removing a Renderer",id:"removing-a-renderer",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"multiple-renderers",children:"Multiple Renderers"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Window"}),"s can render to numerous instances simultaneously with minimal to no performance degradation. This capability is facilitated by the efficient management of renderers through the ",(0,i.jsx)(n.code,{children:"AddRenderer"})," and ",(0,i.jsx)(n.code,{children:"RemoveRenderer"})," methods. These methods enable addition and removal of renderers from the ",(0,i.jsx)(n.code,{children:"Window"})," during runtime."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-renderer",children:"Adding a Renderer"}),"\n",(0,i.jsxs)(n.p,{children:["To add a renderer to a ",(0,i.jsx)(n.code,{children:"Window"}),", utilize the ",(0,i.jsx)(n.code,{children:"AddRenderer"})," method. This method accepts a variadic list of Images as arguments and appends them to the ",(0,i.jsx)(n.code,{children:"Window"}),"'s renderer list. This allows the ",(0,i.jsx)(n.code,{children:"Window"})," to render multiple images concurrently."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"window:AddRenderer(imageOne, imageTwo)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"removing-a-renderer",children:"Removing a Renderer"}),"\n",(0,i.jsxs)(n.p,{children:["Conversely, to remove a renderer from a ",(0,i.jsx)(n.code,{children:"Window"}),", use the ",(0,i.jsx)(n.code,{children:"RemoveRenderer"})," method. This method also accepts a variadic list of Images as arguments. If the specified Images are currently being rendered by the ",(0,i.jsx)(n.code,{children:"Window"}),", they will be removed from the renderer list:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"window:RemoveRenderer(imageOne)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var d=r(96540);const i={},t=d.createContext(i);function s(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[186],{27909:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates an OSGL window by creating a new EditableImage instance at the given place.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n```","params":[{"name":"parent","desc":"The instance the EditableImage will be parented to","lua_type":"Instance"},{"name":"config","desc":"Optional configurations","lua_type":"WindowConfiguration?"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Argument Type\\"","desc":"This error occurs when a required argument is not passed or the type is incorrect"}],"source":{"line":62,"path":"src/window.luau"}},{"name":"from","desc":"Creates an OSGL window from an existing EditableImage.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an existing EditableImage\\nlocal myWindow = Window.from(path.to.editableImage, { size = Vector2.new(50, 50) })\\n```","params":[{"name":"editableImage","desc":"The existing EditableImage","lua_type":"EditableImage"}],"returns":[{"desc":"Returns an OSGL window instance","lua_type":"Window"}],"function_type":"static","errors":[{"lua_type":"\\"Argument Type\\"","desc":"This error occurs when a required argument is not passed or the type is incorrect"}],"source":{"line":92,"path":"src/window.luau"}},{"name":"IsOpen","desc":"Returns if the OSGL Window still exists. Useful for game-loops. Automatically yields\\nfor a heartbeat, or the given time.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n\\n-- Runs every heartbeat\\nwhile myWindow:IsOpen() do\\n    print(\\"Window exists!\\")\\nend\\n\\nprint(\\"The window has been destroyed.\\")\\n```","params":[{"name":"yield","desc":"The amount of time to yield. Defaults to a heartbeat.","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","errors":[{"lua_type":"\\"Argument Type\\"","desc":"This error occurs when a required argument is not passed or the type is incorrect"}],"source":{"line":129,"path":"src/window.luau"}},{"name":"Render","desc":"Renders `Window.pixels` to the EditableImage\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n\\n-- Runs every heartbeat\\nwhile myWindow:IsOpen() do\\n    -- *rendering magic*\\n\\n    myWindow:Render()\\nend\\n```","params":[],"returns":[],"function_type":"method","source":{"line":158,"path":"src/window.luau"}},{"name":"Clear","desc":"Clears the double-buffer with the given color or a transparent color\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new EditableImage\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\n\\n-- Runs every heartbeat\\nwhile myWindow:IsOpen() do\\n    myWindow:Clear(color.GREEN)\\n    myWindow:Render()\\nend\\n```","params":[{"name":"clearColor","desc":"The color the screen will be cleared with","lua_type":"Color?"}],"returns":[],"function_type":"method","source":{"line":198,"path":"src/window.luau"}},{"name":"Resize","desc":"Resizes the window and its pixel buffer. This function may be resource intensive and\\nis not made for constant use. May require a re-render, depending on the new size.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nmyWindow:Resize(100) -- Changes width to 100\\n\\n-- Runs every heartbeat\\nwhile myWindow:IsOpen() do\\n    -- *rendering magic*\\n\\n    myWindow:Render()\\nend\\n```","params":[{"name":"newWidth","desc":"The new width of the window","lua_type":"number?"},{"name":"newHeight","desc":"The new height of the window","lua_type":"number?"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"Height\\"","desc":"This error occurs if the height is smaller than 0"},{"lua_type":"\\"Width\\"","desc":"This error occurs if the width is smaller than 0"}],"source":{"line":229,"path":"src/window.luau"}},{"name":"GetRelativeMouse","desc":"Returns the mouse position relative to the window. Useful to know if the mouse\\nis on-top of the window or not.\\n\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\nlocal color = OSGL.color\\n\\n-- Creates a new Window\\nlocal myWindow = Window.new(path.to.parent, { sizeX = 50, sizeY = 50 })\\nprint(myWindow:GetRelativeMouse()) -- Example output: 25, 25\\n```","params":[],"returns":[{"desc":"The X and Y of the mouse.","lua_type":"(number, number)"}],"function_type":"method","source":{"line":282,"path":"src/window.luau"}}],"properties":[],"types":[{"name":"Window","desc":"An OSGL window is the representation of the EditableImage instance.\\nA window can be created by importing the OSGL \'*window*\' submodule:\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a window from an existing EditableImage\\nlocal myWindow = Window.from(path.to.editableImage)\\n```\\r","fields":[{"name":"renderer","lua_type":"EditableImage","desc":"The actual `EditableImage` instance."},{"name":"pixels","lua_type":"{ Color }","desc":"An array of color values."}],"source":{"line":53,"path":"src/types.luau"}},{"name":"WindowConfiguration","desc":"An OSGL window is the representation of the EditableImage instance.\\nA window can be created by importing the OSGL \'*window*\' submodule:\\n```lua\\nlocal OSGL = require(path.to.osgl)\\nlocal Window = OSGL.Window\\n\u200b\\n-- Creates a Window with a size of 50x50\\nlocal myWindow = Window.new(path.to.instance, { sizeX = 50, sizeY = 50 })\\n```\\r","fields":[{"name":"sizeX","lua_type":"number","desc":"The width of the OSGL window. The maximum width is 1024. Defaults to 100"},{"name":"sizeY","lua_type":"number","desc":"The height of the OSGL window. The maximum height is 1024. Defaults to 100"}],"source":{"line":79,"path":"src/types.luau"}}],"name":"Window","desc":"The window class. Handles creations of OSGL-Windows.\\nAn OSGL window is the representation of the EditableImage\\ninstance.","source":{"line":41,"path":"src/window.luau"}}')}}]);
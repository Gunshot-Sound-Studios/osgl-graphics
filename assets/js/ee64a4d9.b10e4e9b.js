"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[285],{98358:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dev-environment","title":"Development environment","description":"In this chapter, we\'ll set up your environment for using OSGL. All of the tools we\'ll use, such as the image-converter executable, are available on Windows and MacOS.","source":"@site/docs/dev-environment.md","sourceDirName":".","slug":"/dev-environment","permalink":"/osgl/docs/dev-environment","draft":false,"unlisted":false,"editUrl":"https://github.com/osgl-rbx/osgl/edit/main/docs/dev-environment.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Introduction","permalink":"/osgl/docs/intro"},"next":{"title":"Opening a Window","permalink":"/osgl/docs/rendering-to-a-window"}}');var o=r(74848),a=r(28453);const s={sidebar_position:2},l="Development environment",i={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"development-environment",children:"Development environment"})}),"\n",(0,o.jsxs)(n.p,{children:["In this chapter, we'll set up your environment for using OSGL. All of the tools we'll use, such as the ",(0,o.jsx)(n.code,{children:"image-converter"})," executable, are available on Windows and MacOS."]}),"\n",(0,o.jsxs)(n.p,{children:["The most important component you'll need is the actual OSGL module itself. You can download the latest version of the module from either the ",(0,o.jsx)(n.a,{href:"https://github.com/osgl-rbx/osgl/releases/latest",children:"Github releases"}),", the ",(0,o.jsx)(n.a,{href:"https://create.roblox.com/store/asset/18468099737/OSGL",children:"Roblox marketplace"})," or the ",(0,o.jsx)(n.a,{href:"https://wally.run/package/gunshotsoundstudios/osgl",children:"Wally Index"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You can use ",(0,o.jsx)(n.a,{href:"https://rojo.space",children:"Rojo"})," to sync the ",(0,o.jsx)(n.code,{children:"Examples"})," folder to view any examples showcased or referenced in this tutorial. By default, all scripts have their ",(0,o.jsx)(n.code,{children:"Enabled"})," property set to ",(0,o.jsx)(n.code,{children:"false"}),", so you'll need to enable the script to test them. These scripts are designed to be self-sufficient and will automatically create any necessary resources during runtime."]}),"\n",(0,o.jsxs)(n.p,{children:["If you have Rojo, it's a good idea to sync the ",(0,o.jsx)(n.code,{children:"Examples"}),' folder to try out OSGL. A good place to start is to try the example "',(0,o.jsx)(n.strong,{children:"01-BlackScreen"}),'," which renders a black window.']}),"\n",(0,o.jsxs)(n.p,{children:["To start, create a ",(0,o.jsx)(n.code,{children:"LocalScript"})," in your desired location (e.g., ",(0,o.jsx)(n.code,{children:"StarterPlayer/StarterPlayerScripts"}),"). Assuming the OSGL module has been placed in ",(0,o.jsx)(n.code,{children:"ReplicatedStorage"}),", paste the following code into your newly created script to test if OSGL works. Don't worry if you don't understand it yet! Upon running the game, there should be a black ",(0,o.jsx)(n.code,{children:"ImageLabel"})," in the center of your screen."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:'local Players = game:GetService("Players")\r\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal OSGL = require(ReplicatedStorage.OSGL)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal player = Players.LocalPlayer\r\nassert(player)\r\n\r\n-- Define window dimensions\r\nlocal WIDTH = 420\r\nlocal HEIGHT = 420\r\n\r\n-- Create ImageLabel & ScreenGui\r\nlocal ScreenGui = Instance.new("ScreenGui")\r\nScreenGui.Parent = player.PlayerGui\r\n\r\nlocal ImageLabel = Instance.new("ImageLabel")\r\nImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)\r\nImageLabel.Position = UDim2.fromScale(.5, .5)\r\nImageLabel.Size = UDim2.fromOffset(WIDTH, HEIGHT)\r\nImageLabel.Parent = ScreenGui\r\n\r\n-- Create the window\r\nlocal window = Window.new(ImageLabel, { sizeX = WIDTH, sizeY = HEIGHT })\r\nwindow.targetFPS = 244\r\n\r\n-- Draw a black screen and render\r\nwindow\r\n    :Clear(color.BLACK)\r\n    :Render()\n'})}),"\n",(0,o.jsx)(n.p,{children:"If the code above executed successfully, you are now ready to proceed with the tutorial and the script can be deleted."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(96540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[860],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:3},o="Custom OSGL Image-Format",l={unversionedId:"Sprites/custom-texture-format",id:"Sprites/custom-texture-format",title:"Custom OSGL Image-Format",description:"This is something that OSGL uses internally! It does not relate to drawing anything on the screen. If you're still interested in the file-structure, you can continue reading.",source:"@site/docs/Sprites/custom-texture-format.md",sourceDirName:"Sprites",slug:"/Sprites/custom-texture-format",permalink:"/osgl-graphics/docs/Sprites/custom-texture-format",draft:!1,editUrl:"https://github.com/Gunshot-Sound-Studios/osgl-graphics/edit/main/docs/Sprites/custom-texture-format.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Rendering with sprites",permalink:"/osgl-graphics/docs/Sprites/rendering-with-sprites"},next:{title:"Drawing Shapes",permalink:"/osgl-graphics/docs/Shapes/drawing-shapes"}},p={},s=[],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-osgl-image-format"},"Custom OSGL Image-Format"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This is something that OSGL uses internally! It does not relate to drawing anything on the screen. If you're still interested in the file-structure, you can continue reading.")),(0,a.kt)("p",null,"An OSGL texture (known as a ",(0,a.kt)("inlineCode",{parentName:"p"},"FlagTexture")," internally) is the texture generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"converter")," exe. The texture, which is a dictionary, has 3 keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"width (The width of the texture)"),(0,a.kt)("li",{parentName:"ul"},"height (The height of the texture) "),(0,a.kt)("li",{parentName:"ul"},"pixels (The raw pixel data of the texture)")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"pixels")," key of the texture is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"{ number | string }"),".  The ",(0,a.kt)("inlineCode",{parentName:"p"},"number")," being of type ",(0,a.kt)("inlineCode",{parentName:"p"},"color"),", and the string meaning a repeated pixel."),(0,a.kt)("p",null,'The color is self-explanatory. It is the color of a specific pixel at a specific location. A string however contains multiple pixels of the same color, in the format: "rX-Y", ',(0,a.kt)("inlineCode",{parentName:"p"},"X")," meaning how many times that pixel is repeated, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Y"),' being the actual pixel itself. For example, 5 pixels in a row of color "0" would be stored as "r5-0".'),(0,a.kt)("h1",{id:"colors"},"Colors"),(0,a.kt)("p",null,"Colors are stored as a single 32-bit unsigned integer (",(0,a.kt)("inlineCode",{parentName:"p"},"u32"),"). This allows for compact representation and fast manipulation of colors in the form of a single number."),(0,a.kt)("p",null,"Each 32-bit color value is structured as four 8-bit components, representing the Red, Green, Blue, and Alpha (opacity) channels of the color. These components are packed into the 32-bit integer, with each component occupying one byte (8 bits)."),(0,a.kt)("h1",{id:"byte-layout-of-the-color"},"Byte Layout of the Color"),(0,a.kt)("p",null,"The four components are stored in the following order, from the most significant byte to the least significant byte:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"First byte")," (bits 24-31): Red (R)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Second byte")," (bits 16-23): Green (G)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Third byte")," (bits 8-15): Blue (B)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Fourth byte")," (bits 0-7): Alpha (A)"),(0,a.kt)("p",null,"This can be visualised as:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"R"),(0,a.kt)("th",{parentName:"tr",align:null},"G"),(0,a.kt)("th",{parentName:"tr",align:null},"B"),(0,a.kt)("th",{parentName:"tr",align:null},"A"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"8 bits"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bits"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bits"),(0,a.kt)("td",{parentName:"tr",align:null},"8 bits")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"24-31"),(0,a.kt)("td",{parentName:"tr",align:null},"16-23"),(0,a.kt)("td",{parentName:"tr",align:null},"8-15"),(0,a.kt)("td",{parentName:"tr",align:null},"0-7")))),(0,a.kt)("p",null,"For example, consider the color with the following components:"),(0,a.kt)("p",null,"Red (",(0,a.kt)("strong",{parentName:"p"},"R"),"): 255 (",(0,a.kt)("inlineCode",{parentName:"p"},"0xFF"),")"),(0,a.kt)("p",null,"Green (",(0,a.kt)("strong",{parentName:"p"},"G"),"): 128 (",(0,a.kt)("inlineCode",{parentName:"p"},"0x80"),")"),(0,a.kt)("p",null,"Blue (",(0,a.kt)("strong",{parentName:"p"},"B"),"): 64 (",(0,a.kt)("inlineCode",{parentName:"p"},"0x40"),")"),(0,a.kt)("p",null,"Alpha (",(0,a.kt)("strong",{parentName:"p"},"A"),"): 255 (",(0,a.kt)("inlineCode",{parentName:"p"},"0xFF"),")"),(0,a.kt)("p",null,"These components would be packed into a 32-bit integer as follows:"),(0,a.kt)("p",null,"Red (",(0,a.kt)("strong",{parentName:"p"},"R"),"): 255 (",(0,a.kt)("inlineCode",{parentName:"p"},"0xFF"),") -> Occupies bits 24-31"),(0,a.kt)("p",null,"Green (",(0,a.kt)("strong",{parentName:"p"},"G"),"): 128 (",(0,a.kt)("inlineCode",{parentName:"p"},"0x80"),") -> Occupies bits 16-23"),(0,a.kt)("p",null,"Blue (",(0,a.kt)("strong",{parentName:"p"},"B"),"): 64 (",(0,a.kt)("inlineCode",{parentName:"p"},"0x40"),") -> Occupies bits 8-15"),(0,a.kt)("p",null,"Alpha (",(0,a.kt)("strong",{parentName:"p"},"A"),"): 255 (",(0,a.kt)("inlineCode",{parentName:"p"},"0xFF"),") -> Occupies bits 0-7"),(0,a.kt)("p",null,"The resulting 32-bit integer representation would be: ",(0,a.kt)("inlineCode",{parentName:"p"},"0xFF8040FF")," (",(0,a.kt)("inlineCode",{parentName:"p"},"4286595327"),")"))}m.isMDXComponent=!0}}]);